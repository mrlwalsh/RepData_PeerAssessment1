rm(a)
my.birthday.string <- "04.18.1950"
my.birthday.date <- strptime(my.birthday.string, format = "%m.%d.%y")
class(my.birthday.string)
class(my.birthday.date)
days.to.seconds <-
function(d) {
s <- d*60*60*24
s
}
days.to.seconds(1)
options(scipen=16)
days.to.seconds(2)
days.to.seconds(10000)
my.birthday.date + days.to.seconds(10000 - 1)
my.birthday.date
my.birthday.string <- "04.18.1950"
my.birthday.date <- strptime(my.birthday.string, format = "%m.%d.%Y")
class(my.birthday.string)
class(my.birthday.date)
days.to.seconds <-
function(d) {
s <- d*60*60*24
s
}
days.to.seconds(1)
options(scipen=16)
days.to.seconds(2)
days.to.seconds(10000)
my.birthday.date + days.to.seconds(10000 - 1)
my.birthday.date
my.birthday.date + days.to.seconds(10000 - 1)
my.birthday.date + days.to.seconds(30000 - 1)
my.birthday.date + days.to.seconds(20000 - 1)
my.birthday.date + days.to.seconds(25000 - 1)
library(ISLR)
library(islr)
install.packages("ISLR")
search
search()
library(ISLR)
search()
load(auto)
data(auto)
data(Auto)
rm(Auto)
pwd()
### vectors, data, matrices, subsetting
x=c(2,7,5)
x
y=seq(from=4,length=3,by=3)
?seq
y
x+y
x/y
x^y
x[2]
x[2:3]
x[-2]
x[-c(1,2)]
z=matrix(seq(1,12),4,3)
z
z[3:4,2:3]
z[,2:3]
z[,1]
z[,1,drop=FALSE]
dim(z)
ls()
rm(y)
ls()
### Generating random data, graphics
x=runif(50)
y=rnorm(50)
plot(x,y)
plot(x,y,xlab="Random Uniform",ylab="Random Normal",pch="*",col="blue")
par(mfrow=c(2,1))
plot(x,y)
hist(y)
par(mfrow=c(1,1))
### Reading in data
# Auto=read.csv("Auto.csv")
# pwd()
# Auto=read.csv("../Auto.csv")
data(Auto)
names(Auto)
dim(Auto)
class(Auto)
summary(Auto)
plot(Auto$cylinders,Auto$mpg)
plot(Auto$cyl,Auto$mpg)
attach(Auto)
search()
plot(cylinders,mpg)
cylinders=as.factor(cylinders)
plot(cylinders,mpg,xlab="Cylinders",ylab="Mpg",col="red")
pdf(file="../mpg.pdf")
plot(cylinders,mpg,xlab="Cylinders",ylab="Mpg",col="red")
dev.off()
pairs(Auto,col="brown")
pairs(mpg~cylinders+acceleration+weight,Auto)
install.packages("knitr")
getwd()
install.packages("ggplot2")
setwd("~/GitHub/RepData_PeerAssessment1")
setwd("~/GitHub/RepData_PeerAssessment1")
# check for directories and create if needed
if (!file.exists("data")) {
dir.create("data")
}
if (!file.exists("figures")) {
dir.create("figures")
}
# Check and load packages
install_required_libs<-function() {
for(i in 1:length(required_lib)) {
if(required_lib[i] %in% rownames(installed.packages()) == FALSE) {
install.packages(required_lib[i])                            }
library(required_lib[i], character.only = TRUE)
}
}
required_lib =c("ggplot2","ggvis","dplyr")
install_required_libs()
rm(a)
a_data <- read.csv(file="./data/activity.csv",header=TRUE,fill=TRUE)
str(a_data)
summary(a_data)
# transform data
a_data$date <- as.Date(a_data$date, "%Y-%m-%d")
summary(a_data)
steps_plot <-
a_data %>%
group_by(date) %>%
summarize(nsteps = sum(steps)) %>%
ggplot(aes(x=nsteps)) + geom_histogram(binwidth = 1000)
steps_plot + labs(title="Number of Steps per Day", x= "Number of Steps")
#Place plot in figures directory
png(file = "./figures/rrpa1_hist1.png")
steps_plot <-
a_data %>%
group_by(date) %>%
summarize(nsteps = sum(steps)) %>%
ggplot(aes(x=nsteps)) +
geom_histogram(binwidth = 1000) +
labs(title="Number of Steps per Day", x= "Number of Steps")
steps_plot
dev.off()
# group data by day summing steps
meansteps <-
a_data %>%
group_by(date) %>%
summarize(nsteps = sum(steps))
# find mean and median number of steps by day
meansteps
ms <- mean(meansteps$nsteps,na.rm=TRUE)
med <- median(meansteps$nsteps,na.rm=TRUE)
ms
med
# Find and remove NA rows
sum(is.na(a_data))
for (i in 1:ncol(a_data)) {
print(names(a_data)[i]);print(sum(is.na(a_data[,i])))
}
bad_steps <- is.na(a_data$steps)
ga_data <- a_data[!bad_steps,]
summary(a_data)
summary(ga_data)
# Plot time series avgsteps by interval
inter_ggp <-
ga_data %>%
group_by(interval) %>%
summarize(avgsteps = mean(steps)) %>%
ggplot(aes(x=interval,y=avgsteps)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 2400, by = 200))
inter_ggp
# Save Plot to figures dirtectory
png(file = "./figures/rrpa1_interval.png")
inter_ggp <-
ga_data %>%
group_by(interval) %>%
summarize(avgsteps = mean(steps)) %>%
ggplot(aes(x=interval,y=avgsteps)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 2400, by = 200))
inter_ggp
dev.off()
# Plot time series avgsteps by interval
inter_ggp <-
ga_data %>%
group_by(interval) %>%
summarize(avgsteps = mean(steps)) %>%
ggplot(aes(x=interval,y=avgsteps)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 2400, by = 200)) +
labs(title="Time Series of Average Sterps over Interval",
x= "Intra Day Interval")
inter_ggp
# Save Plot to figures dirtectory
png(file = "./figures/rrpa1_interval.png")
inter_ggp <-
ga_data %>%
group_by(interval) %>%
summarize(avgsteps = mean(steps)) %>%
ggplot(aes(x=interval,y=avgsteps)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 2400, by = 200)) +
labs(title="Time Series of Average Sterps over Interval",
x= "Intra Day Interval")
inter_ggp
dev.off()
# Plot time series avgsteps by interval
inter_ggp <-
ga_data %>%
group_by(interval) %>%
summarize(avgsteps = mean(steps)) %>%
ggplot(aes(x=interval,y=avgsteps)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 2400, by = 200)) +
labs(title="Time Series of Average Steps over Interval",
x= "Intra Day Interval")
inter_ggp
# Save Plot to figures dirtectory
png(file = "./figures/rrpa1_interval.png")
inter_ggp <-
ga_data %>%
group_by(interval) %>%
summarize(avgsteps = mean(steps)) %>%
ggplot(aes(x=interval,y=avgsteps)) +
geom_line() +
scale_x_continuous(breaks = seq(0, 2400, by = 200)) +
labs(title="Time Series of Average Steps over Interval",
x= "Intra Day Interval")
inter_ggp
dev.off()
# order avgstep by interval data from High to Low
inter1 <-
ga_data %>%
group_by(interval) %>%
summarize(avgsteps = mean(steps)) %>%
arrange(desc(avgsteps))
inter1
inter1$interval[1]
sum(is.na(a_data))
for (i in 1:ncol(a_data)) {
print(names(a_data)[i]);print(sum(is.na(a_data[,i])))
}
bad_steps <- is.na(a_data$steps)
ba_data <- a_data[bad_steps,]
nrow(ba_data)
tt <- left_join(a_data, inter1)
head(tt)
tail(tt)
tt$avgsteps <- as.integer(tt$avgsteps)
head(tt)
tail(tt)
ttt <- is.na(tt$steps)
tt$steps[is.na(tt$steps)] <- tt$avgsteps
head(tt)
tail(tt)
summary(tt)
steps_plot_revised <-
tt %>%
group_by(date) %>%
summarize(nsteps = sum(steps)) %>%
ggplot(aes(x=nsteps)) + geom_histogram(binwidth = 1000)
steps_plot_revised + labs(title="Number of Steps per Day", x= "Number of Steps")
png(file = "./figures/rrpa1_hist1_rev.png")
steps_plot_revised <-
tt %>%
group_by(date) %>%
summarize(nsteps = sum(steps)) %>%
ggplot(aes(x=nsteps)) +
geom_histogram(binwidth = 1000) +
labs(title="Number of Steps per Day", x= "Number of Steps")
steps_plot_revised
dev.off()
# group data by day summing steps
meansteps_revised <-
tt %>%
group_by(date) %>%
summarize(nsteps = sum(steps))
# find mean and median number of steps by day
# meansteps
ms_rev <- mean(meansteps_revised$nsteps,na.rm=TRUE)
med_rev <- median(meansteps_revised$nsteps,na.rm=TRUE)
ms_rev
med_rev
str(tt)
weekdays(tt$date[1])
inter_by_day_type <-
tt %>%
mutate(day_name = weekdays(date))
str(inter_by_day_type)
inter_by_day_type <-
tt %>%
mutate(day_name = weekdays(date),
day_type = ifelse(day_name = "Monday","Mon","Not"))
inter_by_day_type <-
tt %>%
mutate(day_name = weekdays(date),
day_type = ifelse(day_name == "Monday","Mon","Not"))
str(inter_by_day_type)
inter_by_day_type <-
tt %>%
mutate(day_name = weekdays(date),
day_type = ifelse(day_name == "Monday" |
day_name == "Tuesday","Weekday","Not"))
head(inter_by_day_type)
tail(inter_by_day_type)
inter_by_day_type <-
tt %>%
mutate(day_name = weekdays(date),
day_type = ifelse(day_name == "Saturday" |
day_name == "Sunday","Weekend","Weekday"))
tail(inter_by_day_type)
head(inter_by_day_type)
table(tt$day_type)
table(inter_by_day_type$day_type)
inter_by_day_type <-
tt %>%
mutate(day_name = weekdays(date),
day_type = ifelse(day_name == "Saturday" |
day_name == "Sunday","Weekend","Weekday")) %>%
group_by(interval,day_type) %>%
summarize(avgsteps_day = mean(steps)) %>%
arrange(desc(avgsteps_day))
head(inter_by_day_type)
inter_by_day_type
tail(inter_by_day_type)
inter_by_day_type <-
tt %>%
mutate(day_name = weekdays(date),
day_type = ifelse(day_name == "Saturday" |
day_name == "Sunday","Weekend","Weekday")) %>%
group_by(interval,day_type) %>%
summarize(avgsteps_day = mean(steps)) %>%
ggplot(aes(x=interval,y=avgsteps),facets = ~day_type) +
geom_line() +
scale_x_continuous(breaks = seq(0, 2400, by = 200)) +
labs(title="Time Series of Average Steps over Interval",
x= "Intra Day Interval")
inter_by_day_type
inter_by_day_type <-
tt %>%
mutate(day_name = weekdays(date),
day_type = ifelse(day_name == "Saturday" |
day_name == "Sunday","Weekend","Weekday")) %>%
group_by(interval,day_type) %>%
summarize(avgsteps_day = mean(steps)) %>%
ggplot(aes(x=interval,y=avgsteps_day),facets = ~day_type) +
geom_line() +
scale_x_continuous(breaks = seq(0, 2400, by = 200)) +
labs(title="Time Series of Average Steps over Interval",
x= "Intra Day Interval")
inter_by_day_type
inter_by_day_type <-
tt %>%
mutate(day_name = weekdays(date),
day_type = ifelse(day_name == "Saturday" |
day_name == "Sunday","Weekend","Weekday")) %>%
group_by(interval,day_type) %>%
summarize(avgsteps_day = mean(steps)) %>%
ggplot(aes(x=interval,y=avgsteps_day)) +
geom_line() +
facet_grid(day_type ~ .) +
scale_x_continuous(breaks = seq(0, 2400, by = 200)) +
labs(title="Time Series of Average Steps over Interval",
x= "Intra Day Interval")
inter_by_day_type
